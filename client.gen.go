// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for GetJobsSearchParamsSalary.
const (
	GetJobsSearchParamsSalaryN100k GetJobsSearchParamsSalary = "100k+"
	GetJobsSearchParamsSalaryN120k GetJobsSearchParamsSalary = "120k+"
	GetJobsSearchParamsSalaryN140k GetJobsSearchParamsSalary = "140k+"
	GetJobsSearchParamsSalaryN160k GetJobsSearchParamsSalary = "160k+"
	GetJobsSearchParamsSalaryN180k GetJobsSearchParamsSalary = "180k+"
	GetJobsSearchParamsSalaryN200k GetJobsSearchParamsSalary = "200k+"
	GetJobsSearchParamsSalaryN40k  GetJobsSearchParamsSalary = "40k+"
	GetJobsSearchParamsSalaryN60k  GetJobsSearchParamsSalary = "60k+"
	GetJobsSearchParamsSalaryN80k  GetJobsSearchParamsSalary = "80k+"
)

// Defines values for GetJobsSearchParamsJobType.
const (
	GetJobsSearchParamsJobTypeContract   GetJobsSearchParamsJobType = "contract"
	GetJobsSearchParamsJobTypeFullTime   GetJobsSearchParamsJobType = "fullTime"
	GetJobsSearchParamsJobTypeInternship GetJobsSearchParamsJobType = "internship"
	GetJobsSearchParamsJobTypePartTime   GetJobsSearchParamsJobType = "partTime"
)

// Defines values for GetJobsSearchParamsSort.
const (
	GetJobsSearchParamsSortMostRecent   GetJobsSearchParamsSort = "mostRecent"
	GetJobsSearchParamsSortMostRelevant GetJobsSearchParamsSort = "mostRelevant"
)

// Defines values for GetJobsSearchParamsDatePosted.
const (
	GetJobsSearchParamsDatePostedAnyTime     GetJobsSearchParamsDatePosted = "anyTime"
	GetJobsSearchParamsDatePostedPast24Hours GetJobsSearchParamsDatePosted = "past24Hours"
	GetJobsSearchParamsDatePostedPastMonth   GetJobsSearchParamsDatePosted = "pastMonth"
	GetJobsSearchParamsDatePostedPastWeek    GetJobsSearchParamsDatePosted = "pastWeek"
)

// Defines values for GetV2JobsSearchParamsSalary.
const (
	GetV2JobsSearchParamsSalaryN100k GetV2JobsSearchParamsSalary = "100k+"
	GetV2JobsSearchParamsSalaryN120k GetV2JobsSearchParamsSalary = "120k+"
	GetV2JobsSearchParamsSalaryN140k GetV2JobsSearchParamsSalary = "140k+"
	GetV2JobsSearchParamsSalaryN160k GetV2JobsSearchParamsSalary = "160k+"
	GetV2JobsSearchParamsSalaryN180k GetV2JobsSearchParamsSalary = "180k+"
	GetV2JobsSearchParamsSalaryN200k GetV2JobsSearchParamsSalary = "200k+"
	GetV2JobsSearchParamsSalaryN40k  GetV2JobsSearchParamsSalary = "40k+"
	GetV2JobsSearchParamsSalaryN60k  GetV2JobsSearchParamsSalary = "60k+"
	GetV2JobsSearchParamsSalaryN80k  GetV2JobsSearchParamsSalary = "80k+"
)

// Defines values for GetV2JobsSearchParamsJobType.
const (
	GetV2JobsSearchParamsJobTypeContract   GetV2JobsSearchParamsJobType = "contract"
	GetV2JobsSearchParamsJobTypeFullTime   GetV2JobsSearchParamsJobType = "fullTime"
	GetV2JobsSearchParamsJobTypeInternship GetV2JobsSearchParamsJobType = "internship"
	GetV2JobsSearchParamsJobTypePartTime   GetV2JobsSearchParamsJobType = "partTime"
)

// Defines values for GetV2JobsSearchParamsSort.
const (
	GetV2JobsSearchParamsSortMostRecent   GetV2JobsSearchParamsSort = "mostRecent"
	GetV2JobsSearchParamsSortMostRelevant GetV2JobsSearchParamsSort = "mostRelevant"
)

// Defines values for GetV2JobsSearchParamsDatePosted.
const (
	GetV2JobsSearchParamsDatePostedAnyTime     GetV2JobsSearchParamsDatePosted = "anyTime"
	GetV2JobsSearchParamsDatePostedPast24Hours GetV2JobsSearchParamsDatePosted = "past24Hours"
	GetV2JobsSearchParamsDatePostedPastMonth   GetV2JobsSearchParamsDatePosted = "pastMonth"
	GetV2JobsSearchParamsDatePostedPastWeek    GetV2JobsSearchParamsDatePosted = "pastWeek"
)

// CommonresponsesCompanyDetails defines model for commonresponses.CompanyDetails.
type CommonresponsesCompanyDetails struct {
	Data    *CommonresponsesCompanyDetailsData `json:"data,omitempty"`
	Message *string                            `json:"message,omitempty"`
	Success *bool                              `json:"success,omitempty"`
}

// CommonresponsesCompanyDetailsData defines model for commonresponses.CompanyDetailsData.
type CommonresponsesCompanyDetailsData struct {
	Images *struct {
		Cover *string `json:"cover,omitempty"`
		Logo  *string `json:"logo,omitempty"`
	} `json:"Images,omitempty"`
	BackgroundCoverImages *[]struct {
		Height *int    `json:"height,omitempty"`
		Url    *string `json:"url,omitempty"`
		Width  *int    `json:"width,omitempty"`
	} `json:"backgroundCoverImages,omitempty"`
	CallToAction *struct {
		CallToActionMessage *struct {
			Text          *string `json:"text,omitempty"`
			TextDirection *string `json:"textDirection,omitempty"`
		} `json:"callToActionMessage,omitempty"`
		CallToActionType *string `json:"callToActionType,omitempty"`
		Url              *string `json:"url,omitempty"`
		Visible          *bool   `json:"visible,omitempty"`
	} `json:"callToAction,omitempty"`
	CrunchbaseUrl *string `json:"crunchbaseUrl,omitempty"`
	Description   *string `json:"description,omitempty"`
	FollowerCount *int    `json:"followerCount,omitempty"`
	Founded       *struct {
		Day   *int `json:"day,omitempty"`
		Month *int `json:"month,omitempty"`
		Year  *int `json:"year,omitempty"`
	} `json:"founded,omitempty"`
	FundingData *struct {
		LastFundingRound *struct {
			AnnouncedOn *struct {
				Day   *int `json:"day,omitempty"`
				Month *int `json:"month,omitempty"`
				Year  *int `json:"year,omitempty"`
			} `json:"announcedOn,omitempty"`
			FundingRoundCrunchbaseUrl *string `json:"fundingRoundCrunchbaseUrl,omitempty"`
			FundingType               *string `json:"fundingType,omitempty"`
			InvestorsCrunchbaseUrl    *string `json:"investorsCrunchbaseUrl,omitempty"`
			LeadInvestors             *[]struct {
				InvestorCrunchbaseUrl *string `json:"investorCrunchbaseUrl,omitempty"`
				Name                  *string `json:"name,omitempty"`
			} `json:"leadInvestors,omitempty"`
			MoneyRaised *struct {
				Amount       *string `json:"amount,omitempty"`
				CurrencyCode *string `json:"currencyCode,omitempty"`
			} `json:"moneyRaised,omitempty"`
			NumOtherInvestors *int `json:"numOtherInvestors,omitempty"`
		} `json:"lastFundingRound,omitempty"`
		NumFundingRounds *int    `json:"numFundingRounds,omitempty"`
		UpdatedAt        *string `json:"updatedAt,omitempty"`
		UpdatedDate      *string `json:"updatedDate,omitempty"`
	} `json:"fundingData,omitempty"`
	Headquarter *struct {
		City           *string `json:"city,omitempty"`
		Country        *string `json:"country,omitempty"`
		GeographicArea *string `json:"geographicArea,omitempty"`
		Line1          *string `json:"line1,omitempty"`
		PostalCode     *string `json:"postalCode,omitempty"`
	} `json:"headquarter,omitempty"`
	Id         *string   `json:"id,omitempty"`
	Industries *[]string `json:"industries,omitempty"`
	Locations  *[]struct {
		City           *string `json:"city,omitempty"`
		Country        *string `json:"country,omitempty"`
		GeographicArea *string `json:"geographicArea,omitempty"`
		Headquarter    *bool   `json:"headquarter,omitempty"`
		Line1          *string `json:"line1,omitempty"`
		PostalCode     *string `json:"postalCode,omitempty"`
	} `json:"locations,omitempty"`
	Logos *[]struct {
		Height *int    `json:"height,omitempty"`
		Url    *string `json:"url,omitempty"`
		Width  *int    `json:"width,omitempty"`
	} `json:"logos,omitempty"`
	Name            *string   `json:"name,omitempty"`
	Phone           *string   `json:"phone,omitempty"`
	Specialities    *[]string `json:"specialities,omitempty"`
	StaffCount      *int      `json:"staffCount,omitempty"`
	StaffCountRange *string   `json:"staffCountRange,omitempty"`
	Tagline         *string   `json:"tagline,omitempty"`
	Type            *string   `json:"type,omitempty"`
	UniversalName   *string   `json:"universalName,omitempty"`
	Website         *string   `json:"website,omitempty"`
}

// CommonresponsesContentLanguage defines model for commonresponses.ContentLanguage.
type CommonresponsesContentLanguage struct {
	Code *string `json:"code,omitempty"`
	Name *string `json:"name,omitempty"`
}

// CommonresponsesGetProfilePostsResult defines model for commonresponses.GetProfilePostsResult.
type CommonresponsesGetProfilePostsResult struct {
	Data *[]struct {
		InterestCount     *int `json:"InterestCount,omitempty"`
		AppreciationCount *int `json:"appreciationCount,omitempty"`
		Article           *struct {
			Link     *string `json:"link,omitempty"`
			Subtitle *string `json:"subtitle,omitempty"`
			Title    *string `json:"title,omitempty"`
		} `json:"article,omitempty"`
		Author *struct {
			FirstName       *string `json:"firstName,omitempty"`
			LastName        *string `json:"lastName,omitempty"`
			ProfilePictures *[]struct {
				Height *int    `json:"height,omitempty"`
				Url    *string `json:"url,omitempty"`
				Width  *int    `json:"width,omitempty"`
			} `json:"profile_pictures,omitempty"`
			Url      *string `json:"url,omitempty"`
			Username *string `json:"username,omitempty"`
		} `json:"author,omitempty"`
		CommentsCount *int `json:"commentsCount,omitempty"`
		Company       *struct {
			Name *string `json:"name,omitempty"`
			Url  *string `json:"url,omitempty"`
		} `json:"company,omitempty"`
		EmpathyCount *int `json:"empathyCount,omitempty"`
		FunnyCount   *int `json:"funnyCount,omitempty"`
		Image        *[]struct {
			Url *string `json:"url,omitempty"`
		} `json:"image,omitempty"`
		LikeCount           *int    `json:"likeCount,omitempty"`
		PostUrl             *string `json:"postUrl,omitempty"`
		PostedAt            *string `json:"postedAt,omitempty"`
		PostedDate          *string `json:"postedDate,omitempty"`
		PostedDateTimestamp *int    `json:"postedDateTimestamp,omitempty"`
		PraiseCount         *int    `json:"praiseCount,omitempty"`
		Reposted            *bool   `json:"reposted,omitempty"`
		RepostsCount        *int    `json:"repostsCount,omitempty"`
		ResharedPost        *struct {
			Article *map[string]interface{} `json:"article,omitempty"`
			Author  *struct {
				FirstName *string `json:"firstName,omitempty"`
				LastName  *string `json:"lastName,omitempty"`
				Url       *string `json:"url,omitempty"`
				Username  *string `json:"username,omitempty"`
			} `json:"author,omitempty"`
			Company *map[string]interface{} `json:"company,omitempty"`
			Text    *string                 `json:"text,omitempty"`
			Video   *[]struct {
				Duration *int    `json:"duration,omitempty"`
				Poster   *string `json:"poster,omitempty"`
				Url      *string `json:"url,omitempty"`
			} `json:"video,omitempty"`
		} `json:"resharedPost,omitempty"`
		Text               *string `json:"text,omitempty"`
		TotalReactionCount *int    `json:"totalReactionCount,omitempty"`
		Urn                *string `json:"urn,omitempty"`
		Video              *[]struct {
			Duration *int    `json:"duration,omitempty"`
			Poster   *string `json:"poster,omitempty"`
			Url      *string `json:"url,omitempty"`
		} `json:"video,omitempty"`
	} `json:"data,omitempty"`
	Message         *string `json:"message,omitempty"`
	PaginationToken *string `json:"paginationToken,omitempty"`
	Success         *bool   `json:"success,omitempty"`
}

// CommonresponsesGetProfileResult defines model for commonresponses.GetProfileResult.
type CommonresponsesGetProfileResult struct {
	Connection *int `json:"connection,omitempty"`
	Data       *struct {
		Courses *[]struct {
			Name   *string `json:"name,omitempty"`
			Number *string `json:"number,omitempty"`
		} `json:"courses,omitempty"`
		Educations *[]struct {
			Activities  *string `json:"activities,omitempty"`
			Degree      *string `json:"degree,omitempty"`
			Description *string `json:"description,omitempty"`
			End         *struct {
				Day   *int `json:"day,omitempty"`
				Month *int `json:"month,omitempty"`
				Year  *int `json:"year,omitempty"`
			} `json:"end,omitempty"`
			FieldOfStudy *string `json:"fieldOfStudy,omitempty"`
			Grade        *string `json:"grade,omitempty"`
			SchoolName   *string `json:"schoolName,omitempty"`
			Start        *struct {
				Day   *int `json:"day,omitempty"`
				Month *int `json:"month,omitempty"`
				Year  *int `json:"year,omitempty"`
			} `json:"start,omitempty"`
		} `json:"educations,omitempty"`
		FirstName *string `json:"firstName,omitempty"`
		Geo       *struct {
			City    *string `json:"city,omitempty"`
			Country *string `json:"country,omitempty"`
			Full    *string `json:"full,omitempty"`
		} `json:"geo,omitempty"`
		Headline     *string `json:"headline,omitempty"`
		IsHiring     *bool   `json:"isHiring,omitempty"`
		IsOpenToWork *bool   `json:"isOpenToWork,omitempty"`
		Languages    *[]struct {
			Name        *string `json:"name,omitempty"`
			Proficiency *string `json:"proficiency,omitempty"`
		} `json:"languages,omitempty"`
		LastName *string `json:"lastName,omitempty"`
		Position *[]struct {
			CompanyName    *string `json:"companyName,omitempty"`
			Description    *string `json:"description,omitempty"`
			EmploymentType *string `json:"employmentType,omitempty"`
			End            *struct {
				Day   *int `json:"day,omitempty"`
				Month *int `json:"month,omitempty"`
				Year  *int `json:"year,omitempty"`
			} `json:"end,omitempty"`
			Location *string `json:"location,omitempty"`
			Start    *struct {
				Day   *int `json:"day,omitempty"`
				Month *int `json:"month,omitempty"`
				Year  *int `json:"year,omitempty"`
			} `json:"start,omitempty"`
			Title *string `json:"title,omitempty"`
		} `json:"position,omitempty"`
		ProfilePicture *string `json:"profilePicture,omitempty"`
		Skills         *[]struct {
			Name *string `json:"name,omitempty"`
		} `json:"skills,omitempty"`
		Summary *string `json:"summary,omitempty"`
	} `json:"data,omitempty"`
	Follower *int `json:"follower,omitempty"`
}

// CommonresponsesJobApplyMethod defines model for commonresponses.JobApplyMethod.
type CommonresponsesJobApplyMethod struct {
	CompanyApplyUrl *string `json:"companyApplyUrl,omitempty"`
	EasyApplyUrl    *string `json:"easyApplyUrl,omitempty"`
}

// CommonresponsesJobCompany defines model for commonresponses.JobCompany.
type CommonresponsesJobCompany struct {
	Headquarter     *map[string]interface{} `json:"headquarter,omitempty"`
	Logo            *string                 `json:"logo,omitempty"`
	Name            *string                 `json:"name,omitempty"`
	StaffCountRange *map[string]interface{} `json:"staffCountRange,omitempty"`
	Url             *string                 `json:"url,omitempty"`
}

// CommonresponsesJobDetailsCompany defines model for commonresponses.JobDetailsCompany.
type CommonresponsesJobDetailsCompany struct {
	Description   *string `json:"description,omitempty"`
	FollowerCount *int    `json:"followerCount,omitempty"`
	Headquarter   *struct {
		City           *string `json:"city,omitempty"`
		Country        *string `json:"country,omitempty"`
		GeographicArea *string `json:"geographicArea,omitempty"`
		Line1          *string `json:"line1,omitempty"`
		Line2          *string `json:"line2,omitempty"`
		PostalCode     *string `json:"postalCode,omitempty"`
	} `json:"headquarter,omitempty"`
	Id              *int      `json:"id,omitempty"`
	Industries      *[]string `json:"industries,omitempty"`
	Logo            *string   `json:"logo,omitempty"`
	Name            *string   `json:"name,omitempty"`
	Specialities    *[]string `json:"specialities,omitempty"`
	StaffCount      *int      `json:"staffCount,omitempty"`
	StaffCountRange *struct {
		End   *int `json:"end,omitempty"`
		Start *int `json:"start,omitempty"`
	} `json:"staffCountRange,omitempty"`
	UniversalName *string `json:"universalName,omitempty"`
	Url           *string `json:"url,omitempty"`
}

// CommonresponsesJobDetailsData defines model for commonresponses.JobDetailsData.
type CommonresponsesJobDetailsData struct {
	ApplyMethod              *CommonresponsesJobApplyMethod    `json:"applyMethod,omitempty"`
	Closed                   *bool                             `json:"closed,omitempty"`
	Company                  *CommonresponsesJobDetailsCompany `json:"company,omitempty"`
	ContentLanguage          *CommonresponsesContentLanguage   `json:"contentLanguage,omitempty"`
	Description              *string                           `json:"description,omitempty"`
	ExpireAt                 *int                              `json:"expireAt,omitempty"`
	FormattedExperienceLevel *string                           `json:"formattedExperienceLevel,omitempty"`
	FormattedIndustries      *[]string                         `json:"formattedIndustries,omitempty"`
	FormattedJobFunctions    *[]string                         `json:"formattedJobFunctions,omitempty"`
	Id                       *string                           `json:"id,omitempty"`
	Industries               *[]int                            `json:"industries,omitempty"`
	JobFunctions             *[]string                         `json:"jobFunctions,omitempty"`
	ListedAt                 *int                              `json:"listedAt,omitempty"`
	ListedAtDate             *string                           `json:"listedAtDate,omitempty"`
	Location                 *string                           `json:"location,omitempty"`
	OriginalListedAt         *int                              `json:"originalListedAt,omitempty"`
	OriginalListedDate       *string                           `json:"originalListedDate,omitempty"`
	State                    *string                           `json:"state,omitempty"`
	Title                    *string                           `json:"title,omitempty"`
	Type                     *string                           `json:"type,omitempty"`
	Url                      *string                           `json:"url,omitempty"`
	Views                    *int                              `json:"views,omitempty"`
	WorkPlace                *string                           `json:"workPlace,omitempty"`
	WorkRemoteAllowed        *bool                             `json:"workRemoteAllowed,omitempty"`
}

// CommonresponsesJobItem defines model for commonresponses.JobItem.
type CommonresponsesJobItem struct {
	Benefits    *string                    `json:"benefits,omitempty"`
	Company     *CommonresponsesJobCompany `json:"company,omitempty"`
	Id          *string                    `json:"id,omitempty"`
	Location    *string                    `json:"location,omitempty"`
	PostDate    *string                    `json:"postDate,omitempty"`
	PosterId    *string                    `json:"posterId,omitempty"`
	ReferenceId *string                    `json:"referenceId,omitempty"`
	Title       *string                    `json:"title,omitempty"`
	Type        *string                    `json:"type,omitempty"`
	Url         *string                    `json:"url,omitempty"`
}

// CommonresponsesJobListResponse defines model for commonresponses.JobListResponse.
type CommonresponsesJobListResponse struct {
	Data    *[]CommonresponsesJobItem `json:"data,omitempty"`
	Message *string                   `json:"message,omitempty"`
	Success *bool                     `json:"success,omitempty"`
	Total   *int                      `json:"total,omitempty"`
}

// CommonresponsesPeopleSearchResponse defines model for commonresponses.PeopleSearchResponse.
type CommonresponsesPeopleSearchResponse struct {
	Data *struct {
		Items *[]struct {
			FullName       *string `json:"fullName,omitempty"`
			Headline       *string `json:"headline,omitempty"`
			Location       *string `json:"location,omitempty"`
			ProfilePicture *string `json:"profilePicture,omitempty"`
			ProfileURL     *string `json:"profileURL,omitempty"`
			Summary        *string `json:"summary,omitempty"`
			Username       *string `json:"username,omitempty"`
		} `json:"items,omitempty"`
		Total *int `json:"total,omitempty"`
	} `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
}

// CommonresponsesPostComments defines model for commonresponses.PostComments.
type CommonresponsesPostComments struct {
	Data *[]struct {
		Author *struct {
			LinkedinUrl *string `json:"linkedinUrl,omitempty"`
			Name        *string `json:"name,omitempty"`
			Title       *string `json:"title,omitempty"`
			Urn         *string `json:"urn,omitempty"`
			Username    *string `json:"username,omitempty"`
		} `json:"author,omitempty"`
		CreatedAt       *int    `json:"createdAt,omitempty"`
		CreatedAtString *string `json:"createdAtString,omitempty"`
		IsEdited        *bool   `json:"isEdited,omitempty"`
		IsPinned        *bool   `json:"isPinned,omitempty"`
		Permalink       *string `json:"permalink,omitempty"`
		Text            *string `json:"text,omitempty"`
		ThreadUrn       *string `json:"threadUrn,omitempty"`
	} `json:"data,omitempty"`
	Message         *string `json:"message,omitempty"`
	PaginationToken *string `json:"paginationToken,omitempty"`
	Success         *bool   `json:"success,omitempty"`
	Total           *int    `json:"total,omitempty"`
	TotalPage       *int    `json:"totalPage,omitempty"`
}

// CommonresponsesRecommendationsGiven defines model for commonresponses.RecommendationsGiven.
type CommonresponsesRecommendationsGiven struct {
	Data *[]struct {
		Created      *int `json:"created,omitempty"`
		LastModified *int `json:"lastModified,omitempty"`
		Recommendee  *struct {
			FirstName  *string `json:"firstName,omitempty"`
			LastName   *string `json:"lastName,omitempty"`
			Occupation *string `json:"occupation,omitempty"`
			Username   *string `json:"username,omitempty"`
		} `json:"recommendee,omitempty"`
		Relationship *string `json:"relationship,omitempty"`
		Text         *string `json:"text,omitempty"`
	} `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
	Total   *int    `json:"total,omitempty"`
}

// CommonresponsesRecommendationsReceived defines model for commonresponses.RecommendationsReceived.
type CommonresponsesRecommendationsReceived struct {
	Data *[]struct {
		Created      *int `json:"created,omitempty"`
		LastModified *int `json:"lastModified,omitempty"`
		Recommender  *struct {
			FirstName  *string `json:"firstName,omitempty"`
			LastName   *string `json:"lastName,omitempty"`
			Occupation *string `json:"occupation,omitempty"`
			Username   *string `json:"username,omitempty"`
		} `json:"recommender,omitempty"`
		Relationship *string `json:"relationship,omitempty"`
		Text         *string `json:"text,omitempty"`
	} `json:"data,omitempty"`
	Message *string `json:"message,omitempty"`
	Success *bool   `json:"success,omitempty"`
	Total   *int    `json:"total,omitempty"`
}

// ResponsesAlumni defines model for responses.Alumni.
type ResponsesAlumni struct {
	ExitDate       *ResponsesDate          `json:"exit_date,omitempty"`
	ExitedPosition *string                 `json:"exited_position,omitempty"`
	Profile        *ResponsesAlumniProfile `json:"profile,omitempty"`
}

// ResponsesAlumniProfile defines model for responses.AlumniProfile.
type ResponsesAlumniProfile struct {
	FullName *string `json:"full_name,omitempty"`
	Url      *string `json:"url,omitempty"`
	Username *string `json:"username,omitempty"`
}

// ResponsesAnnouncedOn defines model for responses.AnnouncedOn.
type ResponsesAnnouncedOn struct {
	Day   *int `json:"day,omitempty"`
	Month *int `json:"month,omitempty"`
	Year  *int `json:"year,omitempty"`
}

// ResponsesBackgroundCover defines model for responses.BackgroundCover.
type ResponsesBackgroundCover struct {
	Height *int    `json:"height,omitempty"`
	Url    *string `json:"url,omitempty"`
	Width  *int    `json:"width,omitempty"`
}

// ResponsesCallToAction defines model for responses.CallToAction.
type ResponsesCallToAction struct {
	CallToActionMessage *ResponsesCallToActionMessage `json:"call_to_action_message,omitempty"`
	Type                *string                       `json:"type,omitempty"`
	Url                 *string                       `json:"url,omitempty"`
	Visible             *bool                         `json:"visible,omitempty"`
}

// ResponsesCallToActionMessage defines model for responses.CallToActionMessage.
type ResponsesCallToActionMessage struct {
	Text          *string `json:"text,omitempty"`
	TextDirection *string `json:"text_direction,omitempty"`
}

// ResponsesComment defines model for responses.Comment.
type ResponsesComment struct {
	Author          *ResponsesCommentAuthor `json:"author,omitempty"`
	CreatedAt       *int                    `json:"created_at,omitempty"`
	CreatedAtString *string                 `json:"created_at_string,omitempty"`
	Edited          *bool                   `json:"edited,omitempty"`
	Permalink       *string                 `json:"permalink,omitempty"`
	Pinned          *bool                   `json:"pinned,omitempty"`
	Text            *string                 `json:"text,omitempty"`
	ThreadUrn       *string                 `json:"thread_urn,omitempty"`
}

// ResponsesCommentAuthor defines model for responses.CommentAuthor.
type ResponsesCommentAuthor struct {
	LinkedinUrl *string `json:"linkedinUrl,omitempty"`
	Name        *string `json:"name,omitempty"`
	Title       *string `json:"title,omitempty"`
	Urn         *string `json:"urn,omitempty"`
	Username    *string `json:"username,omitempty"`
}

// ResponsesCompanyDetailsResponseV2 defines model for responses.CompanyDetailsResponseV2.
type ResponsesCompanyDetailsResponseV2 struct {
	BackgroundCovers *[]ResponsesBackgroundCover `json:"background_covers,omitempty"`
	CallToAction     *ResponsesCallToAction      `json:"call_to_action,omitempty"`
	CrunchbaseUrl    *string                     `json:"crunchbase_url,omitempty"`
	Description      *string                     `json:"description,omitempty"`
	FollowersCount   *int                        `json:"followers_count,omitempty"`
	Founded          *ResponsesFounded           `json:"founded,omitempty"`
	Funding          *ResponsesFunding           `json:"funding,omitempty"`
	Headquarter      *ResponsesHeadquarter       `json:"headquarter,omitempty"`
	Id               *string                     `json:"id,omitempty"`
	Industries       *[]string                   `json:"industries,omitempty"`
	Locations        *[]ResponsesLocation        `json:"locations,omitempty"`
	Logos            *[]ResponsesLogo            `json:"logos,omitempty"`
	Name             *string                     `json:"name,omitempty"`
	Phone            *string                     `json:"phone,omitempty"`
	Pictures         *ResponsesCompanyPicture    `json:"pictures,omitempty"`
	Specialities     *[]string                   `json:"specialities,omitempty"`
	StaffCount       *int                        `json:"staff_count,omitempty"`
	StaffCountRange  *string                     `json:"staff_count_range,omitempty"`
	Tagline          *string                     `json:"tagline,omitempty"`
	Type             *string                     `json:"type,omitempty"`
	UniversalName    *string                     `json:"universal_name,omitempty"`
	Website          *string                     `json:"website,omitempty"`
}

// ResponsesCompanyHiresCount defines model for responses.CompanyHiresCount.
type ResponsesCompanyHiresCount struct {
	AllEmployeeHireCount *int           `json:"all_employee_hire_count,omitempty"`
	Date                 *ResponsesDate `json:"date,omitempty"`
	SeniorHireCount      *int           `json:"senior_hire_count,omitempty"`
}

// ResponsesCompanyInfo defines model for responses.CompanyInfo.
type ResponsesCompanyInfo struct {
	Name *string `json:"name,omitempty"`
	Url  *string `json:"url,omitempty"`
	Urn  *string `json:"urn,omitempty"`
}

// ResponsesCompanyInsightsAlumni defines model for responses.CompanyInsightsAlumni.
type ResponsesCompanyInsightsAlumni struct {
	Alumni              *[]ResponsesAlumni `json:"alumni,omitempty"`
	Title               *string            `json:"title,omitempty"`
	TotalNumberOfAlumni *int               `json:"total_number_of_alumni,omitempty"`
}

// ResponsesCompanyInsightsHeadcount defines model for responses.CompanyInsightsHeadcount.
type ResponsesCompanyInsightsHeadcount struct {
	GrowthPeriods   *[]ResponsesHeadcountGrowthPeriod `json:"growth_periods,omitempty"`
	HeadcountGrowth *[]ResponsesHeadcountGrowth       `json:"headcount_growth,omitempty"`
	Title           *string                           `json:"title,omitempty"`
	TotalEmployees  *int                              `json:"total_employees,omitempty"`
}

// ResponsesCompanyInsightsHeadcountFunction defines model for responses.CompanyInsightsHeadcountFunction.
type ResponsesCompanyInsightsHeadcountFunction struct {
	HeadcountGrowthByFunction *[]ResponsesHeadcountGrowthByFunction `json:"headcount_growth_by_function,omitempty"`
	LatestHeadcountByFunction *ResponsesLatestHeadcountByFunction   `json:"latest_headcount_by_function,omitempty"`
	Title                     *string                               `json:"title,omitempty"`
}

// ResponsesCompanyInsightsHires defines model for responses.CompanyInsightsHires.
type ResponsesCompanyInsightsHires struct {
	HireCounts               *[]ResponsesCompanyHiresCount  `json:"hire_counts,omitempty"`
	SeniorHires              *[]ResponsesCompanySeniorHires `json:"senior_hires,omitempty"`
	Title                    *string                        `json:"title,omitempty"`
	TotalHires               *int                           `json:"total_hires,omitempty"`
	TotalNumberOfSeniorHires *int                           `json:"total_number_of_senior_hires,omitempty"`
}

// ResponsesCompanyInsightsJobOpenings defines model for responses.CompanyInsightsJobOpenings.
type ResponsesCompanyInsightsJobOpenings struct {
	JobOpeningsByFunction                 *[]ResponsesJobOpeningFunction          `json:"job_openings_by_function,omitempty"`
	JobOpeningsGrowthAllFunctions         *[]ResponsesJobOpeningGrowthFunction    `json:"job_openings_growth_all_functions,omitempty"`
	JobOpeningsGrowthByFunction           *[]ResponsesJobOpeningsGrowthByFunction `json:"job_openings_growth_by_function,omitempty"`
	JobsOpeningsGrowthUnselectedFunctions *[]ResponsesJobOpeningGrowthFunction    `json:"jobs_openings_growth_unselected_functions,omitempty"`
	Title                                 *string                                 `json:"title,omitempty"`
}

// ResponsesCompanyInsightsV2 defines model for responses.CompanyInsightsV2.
type ResponsesCompanyInsightsV2 struct {
	Company  *ResponsesCompanyDetailsResponseV2  `json:"company,omitempty"`
	Insights *ResponsesCompanyInsightsV2Response `json:"insights,omitempty"`
}

// ResponsesCompanyInsightsV2Response defines model for responses.CompanyInsightsV2Response.
type ResponsesCompanyInsightsV2Response struct {
	Alumni            *ResponsesCompanyInsightsAlumni            `json:"alumni,omitempty"`
	FunctionHeadcount *ResponsesCompanyInsightsHeadcountFunction `json:"function_headcount,omitempty"`
	Headcount         *ResponsesCompanyInsightsHeadcount         `json:"headcount,omitempty"`
	Hires             *ResponsesCompanyInsightsHires             `json:"hires,omitempty"`
	JobOpenings       *ResponsesCompanyInsightsJobOpenings       `json:"job_openings,omitempty"`
}

// ResponsesCompanyPicture defines model for responses.CompanyPicture.
type ResponsesCompanyPicture struct {
	Cover *string `json:"cover,omitempty"`
	Logo  *string `json:"logo,omitempty"`
}

// ResponsesCompanyPost defines model for responses.CompanyPost.
type ResponsesCompanyPost struct {
	AppreciationsCount  *int                         `json:"appreciations_count,omitempty"`
	Article             *ResponsesCompanyPostArticle `json:"article,omitempty"`
	Author              *ResponsesCompanyPostAuthor  `json:"author,omitempty"`
	CommentsCount       *int                         `json:"comments_count,omitempty"`
	Company             *ResponsesCompanyInfo        `json:"company,omitempty"`
	EmpathyCount        *int                         `json:"empathy_count,omitempty"`
	FunnyCount          *int                         `json:"funny_count,omitempty"`
	Images              *[]ResponsesCompanyPostImage `json:"images,omitempty"`
	InterestCount       *int                         `json:"interest_count,omitempty"`
	LikesCount          *int                         `json:"likes_count,omitempty"`
	PostUrl             *string                      `json:"post_url,omitempty"`
	PostedAt            *string                      `json:"posted_at,omitempty"`
	PraiseCount         *int                         `json:"praise_count,omitempty"`
	Reposted            *bool                        `json:"reposted,omitempty"`
	RepostsCount        *int                         `json:"reposts_count,omitempty"`
	Text                *string                      `json:"text,omitempty"`
	TotalReactionsCount *int                         `json:"total_reactions_count,omitempty"`
	Urn                 *string                      `json:"urn,omitempty"`
	Videos              *[]ResponsesCompanyPostVideo `json:"videos,omitempty"`
}

// ResponsesCompanyPostArticle defines model for responses.CompanyPostArticle.
type ResponsesCompanyPostArticle struct {
	Link     *string `json:"link,omitempty"`
	Subtitle *string `json:"subtitle,omitempty"`
	Title    *string `json:"title,omitempty"`
}

// ResponsesCompanyPostAuthor defines model for responses.CompanyPostAuthor.
type ResponsesCompanyPostAuthor struct {
	FirstName *string `json:"first_name,omitempty"`
	LastName  *string `json:"last_name,omitempty"`
	Url       *string `json:"url,omitempty"`
	Username  *string `json:"username,omitempty"`
}

// ResponsesCompanyPostImage defines model for responses.CompanyPostImage.
type ResponsesCompanyPostImage struct {
	Url *string `json:"url,omitempty"`
}

// ResponsesCompanyPostVideo defines model for responses.CompanyPostVideo.
type ResponsesCompanyPostVideo struct {
	Duration *int    `json:"duration,omitempty"`
	Poster   *string `json:"poster,omitempty"`
	Url      *string `json:"url,omitempty"`
}

// ResponsesCompanySeniorHires defines model for responses.CompanySeniorHires.
type ResponsesCompanySeniorHires struct {
	Date          *ResponsesDate         `json:"date,omitempty"`
	HiredPosition *string                `json:"hired_position,omitempty"`
	HiredProfile  *ResponsesHiredProfile `json:"hired_profile,omitempty"`
}

// ResponsesContentLanguage defines model for responses.ContentLanguage.
type ResponsesContentLanguage struct {
	Code *string `json:"code,omitempty"`
	Name *string `json:"name,omitempty"`
}

// ResponsesDate defines model for responses.Date.
type ResponsesDate struct {
	Day   *int `json:"day,omitempty"`
	Month *int `json:"month,omitempty"`
	Year  *int `json:"year,omitempty"`
}

// ResponsesFounded defines model for responses.Founded.
type ResponsesFounded struct {
	Day   *int `json:"day,omitempty"`
	Month *int `json:"month,omitempty"`
	Yeah  *int `json:"yeah,omitempty"`
}

// ResponsesFunding defines model for responses.Funding.
type ResponsesFunding struct {
	LastRound   *ResponsesLastFundingRound `json:"last_round,omitempty"`
	NumRounds   *int                       `json:"num_rounds,omitempty"`
	UpdatedAt   *string                    `json:"updated_at,omitempty"`
	UpdatedDate *string                    `json:"updated_date,omitempty"`
}

// ResponsesGetCompanyPostsResultV2 defines model for responses.GetCompanyPostsResultV2.
type ResponsesGetCompanyPostsResultV2 struct {
	Count *int                    `json:"count,omitempty"`
	Posts *[]ResponsesCompanyPost `json:"posts,omitempty"`
}

// ResponsesGetProfilePostsResultV2 defines model for responses.GetProfilePostsResultV2.
type ResponsesGetProfilePostsResultV2 struct {
	PaginationToken *string                 `json:"pagination_token,omitempty"`
	Posts           *[]ResponsesProfilePost `json:"posts,omitempty"`
}

// ResponsesGrowthPeriod defines model for responses.GrowthPeriod.
type ResponsesGrowthPeriod struct {
	ChangePercentage *int `json:"change_percentage,omitempty"`
	MonthDifference  *int `json:"month_difference,omitempty"`
}

// ResponsesHeadcountByFunction defines model for responses.HeadcountByFunction.
type ResponsesHeadcountByFunction struct {
	EmployeeCount *int    `json:"employee_count,omitempty"`
	Name          *string `json:"name,omitempty"`
	Percentage    *int    `json:"percentage,omitempty"`
	Urn           *string `json:"urn,omitempty"`
}

// ResponsesHeadcountGrowth defines model for responses.HeadcountGrowth.
type ResponsesHeadcountGrowth struct {
	Date          *ResponsesDate `json:"date,omitempty"`
	EmployeeCount *int           `json:"employee_count,omitempty"`
}

// ResponsesHeadcountGrowthByFunction defines model for responses.HeadcountGrowthByFunction.
type ResponsesHeadcountGrowthByFunction struct {
	GrowthPeriods *[]ResponsesGrowthPeriod `json:"growth_periods,omitempty"`
	Name          *string                  `json:"name,omitempty"`
	Urn           *string                  `json:"urn,omitempty"`
}

// ResponsesHeadcountGrowthPeriod defines model for responses.HeadcountGrowthPeriod.
type ResponsesHeadcountGrowthPeriod struct {
	ChangePercentage *int `json:"change_percentage,omitempty"`
	MonthDifference  *int `json:"month_difference,omitempty"`
}

// ResponsesHeadquarter defines model for responses.Headquarter.
type ResponsesHeadquarter struct {
	City           *string `json:"city,omitempty"`
	Country        *string `json:"country,omitempty"`
	FirstLine      *string `json:"first_line,omitempty"`
	GeographicArea *string `json:"geographic_area,omitempty"`
	PostalCode     *string `json:"postal_code,omitempty"`
}

// ResponsesHiredProfile defines model for responses.HiredProfile.
type ResponsesHiredProfile struct {
	FullMame *string `json:"full_mame,omitempty"`
	Url      *string `json:"url,omitempty"`
	Username *string `json:"username,omitempty"`
}

// ResponsesJobApplyMethod defines model for responses.JobApplyMethod.
type ResponsesJobApplyMethod struct {
	CompanyApplyUrl *string `json:"company_apply_url,omitempty"`
	EasyApplyUrl    *string `json:"easy_apply_url,omitempty"`
}

// ResponsesJobCompany defines model for responses.JobCompany.
type ResponsesJobCompany struct {
	Headquarter     *map[string]interface{} `json:"headquarter,omitempty"`
	Logo            *string                 `json:"logo,omitempty"`
	Name            *string                 `json:"name,omitempty"`
	StaffCountRange *map[string]interface{} `json:"staff_count_range,omitempty"`
	Url             *string                 `json:"url,omitempty"`
}

// ResponsesJobCompanyHeadQuarter defines model for responses.JobCompanyHeadQuarter.
type ResponsesJobCompanyHeadQuarter struct {
	AddressLine1   *string `json:"address_line_1,omitempty"`
	AddressLine2   *string `json:"address_line_2,omitempty"`
	City           *string `json:"city,omitempty"`
	Country        *string `json:"country,omitempty"`
	GeographicArea *string `json:"geographic_area,omitempty"`
	PostalCode     *string `json:"postal_code,omitempty"`
}

// ResponsesJobDetailsCompany defines model for responses.JobDetailsCompany.
type ResponsesJobDetailsCompany struct {
	Description     *string                         `json:"description,omitempty"`
	FollowersCount  *int                            `json:"followers_count,omitempty"`
	Headquarter     *ResponsesJobCompanyHeadQuarter `json:"headquarter,omitempty"`
	Id              *int                            `json:"id,omitempty"`
	Industries      *[]string                       `json:"industries,omitempty"`
	Logo            *string                         `json:"logo,omitempty"`
	Name            *string                         `json:"name,omitempty"`
	Specialities    *[]string                       `json:"specialities,omitempty"`
	StaffCount      *int                            `json:"staff_count,omitempty"`
	StaffCountRange *ResponsesStaffCountRange       `json:"staff_count_range,omitempty"`
	UniversalName   *string                         `json:"universal_name,omitempty"`
	Url             *string                         `json:"url,omitempty"`
}

// ResponsesJobDetailsResponseV2 defines model for responses.JobDetailsResponseV2.
type ResponsesJobDetailsResponseV2 struct {
	ApplyMethod              *ResponsesJobApplyMethod    `json:"apply_method,omitempty"`
	Closed                   *bool                       `json:"closed,omitempty"`
	Company                  *ResponsesJobDetailsCompany `json:"company,omitempty"`
	ContentLanguage          *ResponsesContentLanguage   `json:"content_language,omitempty"`
	Description              *string                     `json:"description,omitempty"`
	ExpireAt                 *int                        `json:"expireAt,omitempty"`
	FormattedExperienceLevel *string                     `json:"formatted_experience_level,omitempty"`
	FormattedIndustries      *[]string                   `json:"formatted_industries,omitempty"`
	FormattedJobFunctions    *[]string                   `json:"formatted_job_functions,omitempty"`
	Id                       *string                     `json:"id,omitempty"`
	Industries               *[]int                      `json:"industries,omitempty"`
	JobFunctions             *[]string                   `json:"job_functions,omitempty"`
	ListedAtDate             *string                     `json:"listed_at_date,omitempty"`
	Location                 *string                     `json:"location,omitempty"`
	OriginalListedDate       *string                     `json:"original_listed_date,omitempty"`
	State                    *string                     `json:"state,omitempty"`
	Title                    *string                     `json:"title,omitempty"`
	Type                     *string                     `json:"type,omitempty"`
	Url                      *string                     `json:"url,omitempty"`
	Views                    *int                        `json:"views,omitempty"`
	WorkPlace                *string                     `json:"workPlace,omitempty"`
	WorkRemoteAllowed        *bool                       `json:"work_remote_allowed,omitempty"`
}

// ResponsesJobHiringTeamProfilePicture defines model for responses.JobHiringTeamProfilePicture.
type ResponsesJobHiringTeamProfilePicture struct {
	Height *int    `json:"height,omitempty"`
	Url    *string `json:"url,omitempty"`
	Width  *int    `json:"width,omitempty"`
}

// ResponsesJobHiringTeamResponseV2 defines model for responses.JobHiringTeamResponseV2.
type ResponsesJobHiringTeamResponseV2 struct {
	Team *[]ResponsesJobHiringTeamV2 `json:"team,omitempty"`
}

// ResponsesJobHiringTeamV2 defines model for responses.JobHiringTeamV2.
type ResponsesJobHiringTeamV2 struct {
	FullName        *string                                 `json:"full_name,omitempty"`
	Headline        *string                                 `json:"headline,omitempty"`
	ProfilePictures *[]ResponsesJobHiringTeamProfilePicture `json:"profile_pictures,omitempty"`
	Url             *string                                 `json:"url,omitempty"`
	Username        *string                                 `json:"username,omitempty"`
}

// ResponsesJobItem defines model for responses.JobItem.
type ResponsesJobItem struct {
	Benefits    *string              `json:"benefits,omitempty"`
	Company     *ResponsesJobCompany `json:"company,omitempty"`
	Id          *string              `json:"id,omitempty"`
	Location    *string              `json:"location,omitempty"`
	PostDate    *string              `json:"post_date,omitempty"`
	PosterId    *string              `json:"poster_id,omitempty"`
	ReferenceId *string              `json:"reference_id,omitempty"`
	Title       *string              `json:"title,omitempty"`
	Type        *string              `json:"type,omitempty"`
	Url         *string              `json:"url,omitempty"`
}

// ResponsesJobListResponseV2 defines model for responses.JobListResponseV2.
type ResponsesJobListResponseV2 struct {
	Data  *[]ResponsesJobItem `json:"data,omitempty"`
	Total *int                `json:"total,omitempty"`
}

// ResponsesJobOpeningCountFunction defines model for responses.JobOpeningCountFunction.
type ResponsesJobOpeningCountFunction struct {
	EmployeeCount *int    `json:"employee_count,omitempty"`
	Name          *string `json:"name,omitempty"`
	Percentage    *int    `json:"percentage,omitempty"`
	Urn           *string `json:"urn,omitempty"`
}

// ResponsesJobOpeningFunction defines model for responses.JobOpeningFunction.
type ResponsesJobOpeningFunction struct {
	CountByFunction *[]ResponsesJobOpeningCountFunction `json:"count_by_function,omitempty"`
	Date            *ResponsesDate                      `json:"date,omitempty"`
	TotalCount      *int                                `json:"total_count,omitempty"`
}

// ResponsesJobOpeningGrowthFunction defines model for responses.JobOpeningGrowthFunction.
type ResponsesJobOpeningGrowthFunction struct {
	ChangePercentage *int `json:"change_percentage,omitempty"`
	MonthDifference  *int `json:"month_difference,omitempty"`
}

// ResponsesJobOpeningsGrowthByFunction defines model for responses.JobOpeningsGrowthByFunction.
type ResponsesJobOpeningsGrowthByFunction struct {
	GrowthPeriods *[]ResponsesGrowthPeriod `json:"growth_periods,omitempty"`
	Name          *string                  `json:"name,omitempty"`
	Urn           *string                  `json:"urn,omitempty"`
}

// ResponsesLastFundingRound defines model for responses.LastFundingRound.
type ResponsesLastFundingRound struct {
	AnnouncedOn               *ResponsesAnnouncedOn    `json:"announced_on,omitempty"`
	FundingRoundCrunchbaseUrl *string                  `json:"funding_round_crunchbase_url,omitempty"`
	FundingType               *string                  `json:"funding_type,omitempty"`
	InvestorsCrunchbaseUrl    *string                  `json:"investors_crunchbase_url,omitempty"`
	LeadInvestors             *[]ResponsesLeadInvestor `json:"lead_investors,omitempty"`
	NumOtherInvestors         *int                     `json:"num_other_investors,omitempty"`
	Raised                    *ResponsesMoneyRaised    `json:"raised,omitempty"`
}

// ResponsesLatestHeadcountByFunction defines model for responses.LatestHeadcountByFunction.
type ResponsesLatestHeadcountByFunction struct {
	HeadcountByFunction *[]ResponsesHeadcountByFunction `json:"headcount_by_function,omitempty"`
	TotalCount          *int                            `json:"total_count,omitempty"`
	YearMonthOn         *ResponsesDate                  `json:"year_month_on,omitempty"`
}

// ResponsesLeadInvestor defines model for responses.LeadInvestor.
type ResponsesLeadInvestor struct {
	InvestorCrunchbaseUrl *string `json:"investor_crunchbase_url,omitempty"`
	Name                  *string `json:"name,omitempty"`
}

// ResponsesLocation defines model for responses.Location.
type ResponsesLocation struct {
	City           *string `json:"city,omitempty"`
	Country        *string `json:"country,omitempty"`
	FirstLine      *string `json:"first_line,omitempty"`
	GeographicArea *string `json:"geographic_area,omitempty"`
	Headquarter    *bool   `json:"headquarter,omitempty"`
	PostalCode     *string `json:"postal_code,omitempty"`
	SecondLine     *string `json:"second_line,omitempty"`
}

// ResponsesLogo defines model for responses.Logo.
type ResponsesLogo struct {
	Height *int    `json:"height,omitempty"`
	Url    *string `json:"url,omitempty"`
	Width  *int    `json:"width,omitempty"`
}

// ResponsesMoneyRaised defines model for responses.MoneyRaised.
type ResponsesMoneyRaised struct {
	Amount   *string `json:"amount,omitempty"`
	Currency *string `json:"currency,omitempty"`
}

// ResponsesPeople defines model for responses.People.
type ResponsesPeople struct {
	FullName       *string `json:"fullName,omitempty"`
	Headline       *string `json:"headline,omitempty"`
	Location       *string `json:"location,omitempty"`
	ProfilePicture *string `json:"profilePicture,omitempty"`
	ProfileURL     *string `json:"profileURL,omitempty"`
	Summary        *string `json:"summary,omitempty"`
	Username       *string `json:"username,omitempty"`
}

// ResponsesPeopleSearchResponseV2 defines model for responses.PeopleSearchResponseV2.
type ResponsesPeopleSearchResponseV2 struct {
	Items *[]ResponsesPeople `json:"items,omitempty"`
	Total *int               `json:"total,omitempty"`
}

// ResponsesPostCommentsV2 defines model for responses.PostCommentsV2.
type ResponsesPostCommentsV2 struct {
	Data            *[]ResponsesComment `json:"data,omitempty"`
	PaginationToken *string             `json:"pagination_token,omitempty"`
	Total           *int                `json:"total,omitempty"`
	TotalPage       *int                `json:"total_page,omitempty"`
}

// ResponsesPostReactionsV2 defines model for responses.PostReactionsV2.
type ResponsesPostReactionsV2 struct {
	Data       *[]ResponsesReaction `json:"data,omitempty"`
	Page       *int                 `json:"page,omitempty"`
	Total      *int                 `json:"total,omitempty"`
	TotalPages *int                 `json:"total_pages,omitempty"`
}

// ResponsesProfilPostVideo defines model for responses.ProfilPostVideo.
type ResponsesProfilPostVideo struct {
	Duration *int    `json:"duration,omitempty"`
	Poster   *string `json:"poster,omitempty"`
	Url      *string `json:"url,omitempty"`
}

// ResponsesProfileAudience defines model for responses.ProfileAudience.
type ResponsesProfileAudience struct {
	Connections *int `json:"connections,omitempty"`
	Followers   *int `json:"followers,omitempty"`
}

// ResponsesProfileCourse defines model for responses.ProfileCourse.
type ResponsesProfileCourse struct {
	Name   *string `json:"name,omitempty"`
	Number *string `json:"number,omitempty"`
}

// ResponsesProfileEducationV2 defines model for responses.ProfileEducationV2.
type ResponsesProfileEducationV2 struct {
	Activities  *string               `json:"activities,omitempty"`
	Degree      *string               `json:"degree,omitempty"`
	Description *string               `json:"description,omitempty"`
	End         *UtilsLinkedInDateObj `json:"end,omitempty"`
	Field       *string               `json:"field,omitempty"`
	Grade       *string               `json:"grade,omitempty"`
	SchoolName  *string               `json:"school_name,omitempty"`
	Start       *UtilsLinkedInDateObj `json:"start,omitempty"`
}

// ResponsesProfileExperienceV2 defines model for responses.ProfileExperienceV2.
type ResponsesProfileExperienceV2 struct {
	ComapnyName    *string               `json:"comapny_name,omitempty"`
	Description    *string               `json:"description,omitempty"`
	EmploymentType *string               `json:"employment_type,omitempty"`
	End            *UtilsLinkedInDateObj `json:"end,omitempty"`
	Location       *string               `json:"location,omitempty"`
	Start          *UtilsLinkedInDateObj `json:"start,omitempty"`
	Title          *string               `json:"title,omitempty"`
}

// ResponsesProfileLanguage defines model for responses.ProfileLanguage.
type ResponsesProfileLanguage struct {
	Name        *string `json:"name,omitempty"`
	Proficiency *string `json:"proficiency,omitempty"`
}

// ResponsesProfileLocation defines model for responses.ProfileLocation.
type ResponsesProfileLocation struct {
	City    *string `json:"city,omitempty"`
	Country *string `json:"country,omitempty"`
	Full    *string `json:"full,omitempty"`
}

// ResponsesProfilePicture defines model for responses.ProfilePicture.
type ResponsesProfilePicture struct {
	Height *int    `json:"height,omitempty"`
	Url    *string `json:"url,omitempty"`
	Width  *int    `json:"width,omitempty"`
}

// ResponsesProfilePost defines model for responses.ProfilePost.
type ResponsesProfilePost struct {
	AppreciationsCount  *int                               `json:"appreciations_count,omitempty"`
	Article             *ResponsesProfilePostArticle       `json:"article,omitempty"`
	Author              *ResponsesProfilePostAuthor        `json:"author,omitempty"`
	AuthorCompany       *ResponsesProfilePostAuthorCompany `json:"author_company,omitempty"`
	CommentsCount       *int                               `json:"comments_count,omitempty"`
	EmpathyCount        *int                               `json:"empathy_count,omitempty"`
	FunnyCount          *int                               `json:"funny_count,omitempty"`
	Images              *[]ResponsesProfilePostImage       `json:"images,omitempty"`
	InterestCount       *int                               `json:"interest_count,omitempty"`
	LikesCount          *int                               `json:"likes_count,omitempty"`
	PostUrl             *string                            `json:"post_url,omitempty"`
	PostedAt            *string                            `json:"posted_at,omitempty"`
	PostedAtTimestamp   *int                               `json:"posted_at_timestamp,omitempty"`
	PraiseCount         *int                               `json:"praise_count,omitempty"`
	Reposted            *bool                              `json:"reposted,omitempty"`
	RepostsCount        *int                               `json:"reposts_count,omitempty"`
	ResharedPost        *ResponsesProfilePostReShared      `json:"reshared_post,omitempty"`
	Text                *string                            `json:"text,omitempty"`
	TotalReactionsCount *int                               `json:"total_reactions_count,omitempty"`
	Urn                 *string                            `json:"urn,omitempty"`
	Videos              *[]ResponsesProfilPostVideo        `json:"videos,omitempty"`
}

// ResponsesProfilePostArticle defines model for responses.ProfilePostArticle.
type ResponsesProfilePostArticle struct {
	Link     *string `json:"link,omitempty"`
	Subtitle *string `json:"subtitle,omitempty"`
	Title    *string `json:"title,omitempty"`
}

// ResponsesProfilePostAuthor defines model for responses.ProfilePostAuthor.
type ResponsesProfilePostAuthor struct {
	FirstName       *string                    `json:"first_name,omitempty"`
	LastName        *string                    `json:"last_name,omitempty"`
	ProfilePictures *[]ResponsesProfilePicture `json:"profile_pictures,omitempty"`
	Url             *string                    `json:"url,omitempty"`
	Username        *string                    `json:"username,omitempty"`
}

// ResponsesProfilePostAuthorCompany defines model for responses.ProfilePostAuthorCompany.
type ResponsesProfilePostAuthorCompany struct {
	Name *string `json:"name,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ResponsesProfilePostImage defines model for responses.ProfilePostImage.
type ResponsesProfilePostImage struct {
	Url *string `json:"url,omitempty"`
}

// ResponsesProfilePostReShared defines model for responses.ProfilePostReShared.
type ResponsesProfilePostReShared struct {
	Article *ResponsesProfilePostArticle `json:"article,omitempty"`
	Author  *ResponsesProfilePostAuthor  `json:"author,omitempty"`
	Text    *string                      `json:"text,omitempty"`
	Videos  *[]ResponsesProfilPostVideo  `json:"videos,omitempty"`
}

// ResponsesProfileResponseV2 defines model for responses.ProfileResponseV2.
type ResponsesProfileResponseV2 struct {
	Audience     *ResponsesProfileAudience       `json:"audience,omitempty"`
	Courses      *[]ResponsesProfileCourse       `json:"courses,omitempty"`
	Educations   *[]ResponsesProfileEducationV2  `json:"educations,omitempty"`
	Experiences  *[]ResponsesProfileExperienceV2 `json:"experiences,omitempty"`
	FirstName    *string                         `json:"first_name,omitempty"`
	Headline     *string                         `json:"headline,omitempty"`
	IsHiring     *bool                           `json:"is_hiring,omitempty"`
	IsOpenToWork *bool                           `json:"is_open_to_work,omitempty"`
	Languages    *[]ResponsesProfileLanguage     `json:"languages,omitempty"`
	LastName     *string                         `json:"last_name,omitempty"`
	Location     *ResponsesProfileLocation       `json:"location,omitempty"`
	Picture      *string                         `json:"picture,omitempty"`
	Skills       *[]ResponsesProfileSkill        `json:"skills,omitempty"`
	Summary      *string                         `json:"summary,omitempty"`
}

// ResponsesProfileSkill defines model for responses.ProfileSkill.
type ResponsesProfileSkill struct {
	Name *string `json:"name,omitempty"`
}

// ResponsesReaction defines model for responses.Reaction.
type ResponsesReaction struct {
	CommentUrn     *string `json:"comment_urn,omitempty"`
	FullName       *string `json:"full_name,omitempty"`
	Headline       *string `json:"headline,omitempty"`
	ProfilePicture *string `json:"profile_picture,omitempty"`
	ProfileType    *string `json:"profile_type,omitempty"`
	ProfileUrl     *string `json:"profile_url,omitempty"`
	ReactionType   *string `json:"reaction_type,omitempty"`
}

// ResponsesRecommendationGiven defines model for responses.RecommendationGiven.
type ResponsesRecommendationGiven struct {
	Created      *int           `json:"created,omitempty"`
	LastModified *int           `json:"last_modified,omitempty"`
	Recommendee  *ResponsesUser `json:"recommendee,omitempty"`
	Relationship *string        `json:"relationship,omitempty"`
	Text         *string        `json:"text,omitempty"`
}

// ResponsesRecommendationReceived defines model for responses.RecommendationReceived.
type ResponsesRecommendationReceived struct {
	Created      *int           `json:"created,omitempty"`
	LastModified *int           `json:"lastModified,omitempty"`
	Recommender  *ResponsesUser `json:"recommender,omitempty"`
	Relationship *string        `json:"relationship,omitempty"`
	Text         *string        `json:"text,omitempty"`
}

// ResponsesRecommendationsGivenV2 defines model for responses.RecommendationsGivenV2.
type ResponsesRecommendationsGivenV2 struct {
	Data  *[]ResponsesRecommendationGiven `json:"data,omitempty"`
	Total *int                            `json:"total,omitempty"`
}

// ResponsesRecommendationsReceivedV2 defines model for responses.RecommendationsReceivedV2.
type ResponsesRecommendationsReceivedV2 struct {
	Data  *[]ResponsesRecommendationReceived `json:"data,omitempty"`
	Total *int                               `json:"total,omitempty"`
}

// ResponsesStaffCountRange defines model for responses.StaffCountRange.
type ResponsesStaffCountRange struct {
	End   *int `json:"end,omitempty"`
	Start *int `json:"start,omitempty"`
}

// ResponsesUser defines model for responses.User.
type ResponsesUser struct {
	FirstName  *string `json:"first_name,omitempty"`
	LastName   *string `json:"last_name,omitempty"`
	Occupation *string `json:"occupation,omitempty"`
	Username   *string `json:"username,omitempty"`
}

// UtilsLinkedInDateObj defines model for utils.LinkedInDateObj.
type UtilsLinkedInDateObj struct {
	Day   *int `json:"day,omitempty"`
	Month *int `json:"month,omitempty"`
	Year  *int `json:"year,omitempty"`
}

// GetCompanyParams defines parameters for GetCompany.
type GetCompanyParams struct {
	// LiCompanyUrl LinkedIn company page URL
	LiCompanyUrl string `form:"li_company_url" json:"li_company_url"`
}

// GetJobsDetailsParams defines parameters for GetJobsDetails.
type GetJobsDetailsParams struct {
	// JobId Id of the Job from LinkedIn received in the search results
	JobId string `form:"job_id" json:"job_id"`
}

// GetJobsSearchParams defines parameters for GetJobsSearch.
type GetJobsSearchParams struct {
	// CompanyIds List of IDs of the companies
	CompanyIds *string `form:"company_ids,omitempty" json:"company_ids,omitempty"`

	// Salary List of IDs of the companies
	Salary *GetJobsSearchParamsSalary `form:"salary,omitempty" json:"salary,omitempty"`

	// JobType Type of the job
	JobType *GetJobsSearchParamsJobType `form:"job_type,omitempty" json:"job_type,omitempty"`

	// Sort Sort the results by
	Sort *GetJobsSearchParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Keywords Keywords to search for
	Keywords *string `form:"keywords,omitempty" json:"keywords,omitempty"`

	// DatePosted Date posted
	DatePosted *GetJobsSearchParamsDatePosted `form:"date_posted,omitempty" json:"date_posted,omitempty"`
}

// GetJobsSearchParamsSalary defines parameters for GetJobsSearch.
type GetJobsSearchParamsSalary string

// GetJobsSearchParamsJobType defines parameters for GetJobsSearch.
type GetJobsSearchParamsJobType string

// GetJobsSearchParamsSort defines parameters for GetJobsSearch.
type GetJobsSearchParamsSort string

// GetJobsSearchParamsDatePosted defines parameters for GetJobsSearch.
type GetJobsSearchParamsDatePosted string

// GetPostCommentsParams defines parameters for GetPostComments.
type GetPostCommentsParams struct {
	// Urn LinkedIN post URN
	Urn string `form:"urn" json:"urn"`
}

// GetProfileParams defines parameters for GetProfile.
type GetProfileParams struct {
	// LiProfileUrl URL to LinkedIn profile
	LiProfileUrl string `form:"li_profile_url" json:"li_profile_url"`
}

// GetProfilePostsParams defines parameters for GetProfilePosts.
type GetProfilePostsParams struct {
	// LiProfileUrl LinkedIn profile URL
	LiProfileUrl string `form:"li_profile_url" json:"li_profile_url"`

	// PaginationToken Pagination token
	PaginationToken *string `form:"pagination_token,omitempty" json:"pagination_token,omitempty"`

	// Offset Pagination offset. Must be incremented by 50 on every page
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetProfileRecommendationsGivenParams defines parameters for GetProfileRecommendationsGiven.
type GetProfileRecommendationsGivenParams struct {
	// LiProfileUrl URL to LinkedIn profile
	LiProfileUrl string `form:"li_profile_url" json:"li_profile_url"`
}

// GetProfileRecommendationsReceivedParams defines parameters for GetProfileRecommendationsReceived.
type GetProfileRecommendationsReceivedParams struct {
	// LiProfileUrl URL to LinkedIn profile
	LiProfileUrl string `form:"li_profile_url" json:"li_profile_url"`
}

// GetProfileSearchParams defines parameters for GetProfileSearch.
type GetProfileSearchParams struct {
	// Q Any keyword you want to search people for
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Start Pagination offset 0, 10, 20, 30, multiplies by 10 on every page
	Start *float32 `form:"start,omitempty" json:"start,omitempty"`

	// SchoolId ID Of the school you want to search people for
	SchoolId *float32 `form:"school_id,omitempty" json:"school_id,omitempty"`

	// KeywordSchool School name
	KeywordSchool *string `form:"keyword_school,omitempty" json:"keyword_school,omitempty"`

	// FirstName First name of the person
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty"`

	// LastName Last name of the person
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty"`

	// CompanyName Name of the company
	CompanyName *string `form:"company_name,omitempty" json:"company_name,omitempty"`

	// Title Title of the person
	Title *string `form:"title,omitempty" json:"title,omitempty"`
}

// GetV2CompanyParams defines parameters for GetV2Company.
type GetV2CompanyParams struct {
	// LiCompanyUrl LinkedIn company page URL
	LiCompanyUrl string `form:"li_company_url" json:"li_company_url"`
}

// GetV2CompanyInsightsParams defines parameters for GetV2CompanyInsights.
type GetV2CompanyInsightsParams struct {
	// LiCompanyUrl LinkedIn company page URL
	LiCompanyUrl string `form:"li_company_url" json:"li_company_url"`
}

// GetV2CompanyPostsParams defines parameters for GetV2CompanyPosts.
type GetV2CompanyPostsParams struct {
	// LiCompanyUrl LinkedIn company page URL
	LiCompanyUrl string `form:"li_company_url" json:"li_company_url"`

	// Offset Offset from which to fetch posts. Default 0
	Offset string `form:"offset" json:"offset"`
}

// GetV2JobsDetailsParams defines parameters for GetV2JobsDetails.
type GetV2JobsDetailsParams struct {
	// JobId If of the Job from LinkedIn received in the search results
	JobId string `form:"job_id" json:"job_id"`
}

// GetV2JobsHiringteamParams defines parameters for GetV2JobsHiringteam.
type GetV2JobsHiringteamParams struct {
	// JobId ID of the Job On LinkedIn
	JobId *string `form:"job_id,omitempty" json:"job_id,omitempty"`
}

// GetV2JobsSearchParams defines parameters for GetV2JobsSearch.
type GetV2JobsSearchParams struct {
	// CompanyIds List of IDs of the companies
	CompanyIds *string `form:"company_ids,omitempty" json:"company_ids,omitempty"`

	// Salary List of IDs of the companies
	Salary *GetV2JobsSearchParamsSalary `form:"salary,omitempty" json:"salary,omitempty"`

	// JobType Type of the job
	JobType *GetV2JobsSearchParamsJobType `form:"job_type,omitempty" json:"job_type,omitempty"`

	// Sort Sort the results by
	Sort *GetV2JobsSearchParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Keywords Keywords to search for
	Keywords *string `form:"keywords,omitempty" json:"keywords,omitempty"`

	// Location Location to search for. Use 'worldwide' or 92000000 for global search
	Location *string `form:"location,omitempty" json:"location,omitempty"`

	// DatePosted Date posted
	DatePosted *GetV2JobsSearchParamsDatePosted `form:"date_posted,omitempty" json:"date_posted,omitempty"`

	// Start Start index for the search 0, 50, 100, 150, 200
	Start *string `form:"start,omitempty" json:"start,omitempty"`
}

// GetV2JobsSearchParamsSalary defines parameters for GetV2JobsSearch.
type GetV2JobsSearchParamsSalary string

// GetV2JobsSearchParamsJobType defines parameters for GetV2JobsSearch.
type GetV2JobsSearchParamsJobType string

// GetV2JobsSearchParamsSort defines parameters for GetV2JobsSearch.
type GetV2JobsSearchParamsSort string

// GetV2JobsSearchParamsDatePosted defines parameters for GetV2JobsSearch.
type GetV2JobsSearchParamsDatePosted string

// GetV2PostCommentsParams defines parameters for GetV2PostComments.
type GetV2PostCommentsParams struct {
	// Urn LinkedIN post URN
	Urn string `form:"urn" json:"urn"`
}

// GetV2PostReactionsParams defines parameters for GetV2PostReactions.
type GetV2PostReactionsParams struct {
	// PostUrl LinkedIn post URL like https://www.linkedin.com/posts/attio_join-the-worlds-leading-startups-and-build-activity-7267725835011272704-FPDI/?utm_source=share&utm_medium=member_desktop
	PostUrl string `form:"post_url" json:"post_url"`

	// Page Page number
	Page *string `form:"page,omitempty" json:"page,omitempty"`
}

// GetV2ProfileParams defines parameters for GetV2Profile.
type GetV2ProfileParams struct {
	// LiProfileUrl URL to LinkedIn profile
	LiProfileUrl string `form:"li_profile_url" json:"li_profile_url"`
}

// GetV2ProfilePostsParams defines parameters for GetV2ProfilePosts.
type GetV2ProfilePostsParams struct {
	// LiProfileUrl LinkedIn profile URL
	LiProfileUrl string `form:"li_profile_url" json:"li_profile_url"`

	// PaginationToken Pagination token
	PaginationToken *string `form:"pagination_token,omitempty" json:"pagination_token,omitempty"`

	// Offset Pagination offset. Must be incremented by 50 on every page
	Offset *float32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetV2ProfileRecommendationsGivenParams defines parameters for GetV2ProfileRecommendationsGiven.
type GetV2ProfileRecommendationsGivenParams struct {
	// LiProfileUrl URL to LinkedIn profile
	LiProfileUrl string `form:"li_profile_url" json:"li_profile_url"`
}

// GetV2ProfileRecommendationsReceivedParams defines parameters for GetV2ProfileRecommendationsReceived.
type GetV2ProfileRecommendationsReceivedParams struct {
	// LiProfileUrl URL to LinkedIn profile
	LiProfileUrl string `form:"li_profile_url" json:"li_profile_url"`
}

// GetV2ProfileSearchParams defines parameters for GetV2ProfileSearch.
type GetV2ProfileSearchParams struct {
	// Q Any keyword you want to search people for
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Start Pagination offset 0, 10, 20, 30, multiplies by 10 on every page
	Start *float32 `form:"start,omitempty" json:"start,omitempty"`

	// SchoolId ID Of the school you want to search people for
	SchoolId *float32 `form:"school_id,omitempty" json:"school_id,omitempty"`

	// KeywordSchool School name
	KeywordSchool *string `form:"keyword_school,omitempty" json:"keyword_school,omitempty"`

	// FirstName First name of the person
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty"`

	// LastName Last name of the person
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty"`

	// CompanyName Name of the company
	CompanyName *string `form:"company_name,omitempty" json:"company_name,omitempty"`

	// Title Title of the person
	Title *string `form:"title,omitempty" json:"title,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCompany request
	GetCompany(ctx context.Context, params *GetCompanyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobsDetails request
	GetJobsDetails(ctx context.Context, params *GetJobsDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobsSearch request
	GetJobsSearch(ctx context.Context, params *GetJobsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPostComments request
	GetPostComments(ctx context.Context, params *GetPostCommentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProfile request
	GetProfile(ctx context.Context, params *GetProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProfilePosts request
	GetProfilePosts(ctx context.Context, params *GetProfilePostsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProfileRecommendationsGiven request
	GetProfileRecommendationsGiven(ctx context.Context, params *GetProfileRecommendationsGivenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProfileRecommendationsReceived request
	GetProfileRecommendationsReceived(ctx context.Context, params *GetProfileRecommendationsReceivedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProfileSearch request
	GetProfileSearch(ctx context.Context, params *GetProfileSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2Company request
	GetV2Company(ctx context.Context, params *GetV2CompanyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2CompanyInsights request
	GetV2CompanyInsights(ctx context.Context, params *GetV2CompanyInsightsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2CompanyPosts request
	GetV2CompanyPosts(ctx context.Context, params *GetV2CompanyPostsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2JobsDetails request
	GetV2JobsDetails(ctx context.Context, params *GetV2JobsDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2JobsHiringteam request
	GetV2JobsHiringteam(ctx context.Context, params *GetV2JobsHiringteamParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2JobsSearch request
	GetV2JobsSearch(ctx context.Context, params *GetV2JobsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2PostComments request
	GetV2PostComments(ctx context.Context, params *GetV2PostCommentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2PostReactions request
	GetV2PostReactions(ctx context.Context, params *GetV2PostReactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2Profile request
	GetV2Profile(ctx context.Context, params *GetV2ProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2ProfilePosts request
	GetV2ProfilePosts(ctx context.Context, params *GetV2ProfilePostsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2ProfileRecommendationsGiven request
	GetV2ProfileRecommendationsGiven(ctx context.Context, params *GetV2ProfileRecommendationsGivenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2ProfileRecommendationsReceived request
	GetV2ProfileRecommendationsReceived(ctx context.Context, params *GetV2ProfileRecommendationsReceivedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV2ProfileSearch request
	GetV2ProfileSearch(ctx context.Context, params *GetV2ProfileSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCompany(ctx context.Context, params *GetCompanyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobsDetails(ctx context.Context, params *GetJobsDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobsDetailsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobsSearch(ctx context.Context, params *GetJobsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobsSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPostComments(ctx context.Context, params *GetPostCommentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPostCommentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProfile(ctx context.Context, params *GetProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProfileRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProfilePosts(ctx context.Context, params *GetProfilePostsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProfilePostsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProfileRecommendationsGiven(ctx context.Context, params *GetProfileRecommendationsGivenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProfileRecommendationsGivenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProfileRecommendationsReceived(ctx context.Context, params *GetProfileRecommendationsReceivedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProfileRecommendationsReceivedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProfileSearch(ctx context.Context, params *GetProfileSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProfileSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2Company(ctx context.Context, params *GetV2CompanyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2CompanyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2CompanyInsights(ctx context.Context, params *GetV2CompanyInsightsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2CompanyInsightsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2CompanyPosts(ctx context.Context, params *GetV2CompanyPostsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2CompanyPostsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2JobsDetails(ctx context.Context, params *GetV2JobsDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2JobsDetailsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2JobsHiringteam(ctx context.Context, params *GetV2JobsHiringteamParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2JobsHiringteamRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2JobsSearch(ctx context.Context, params *GetV2JobsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2JobsSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2PostComments(ctx context.Context, params *GetV2PostCommentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2PostCommentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2PostReactions(ctx context.Context, params *GetV2PostReactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2PostReactionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2Profile(ctx context.Context, params *GetV2ProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2ProfileRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2ProfilePosts(ctx context.Context, params *GetV2ProfilePostsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2ProfilePostsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2ProfileRecommendationsGiven(ctx context.Context, params *GetV2ProfileRecommendationsGivenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2ProfileRecommendationsGivenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2ProfileRecommendationsReceived(ctx context.Context, params *GetV2ProfileRecommendationsReceivedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2ProfileRecommendationsReceivedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV2ProfileSearch(ctx context.Context, params *GetV2ProfileSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV2ProfileSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCompanyRequest generates requests for GetCompany
func NewGetCompanyRequest(server string, params *GetCompanyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/company")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "li_company_url", runtime.ParamLocationQuery, params.LiCompanyUrl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobsDetailsRequest generates requests for GetJobsDetails
func NewGetJobsDetailsRequest(server string, params *GetJobsDetailsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/details")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "job_id", runtime.ParamLocationQuery, params.JobId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetJobsSearchRequest generates requests for GetJobsSearch
func NewGetJobsSearchRequest(server string, params *GetJobsSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CompanyIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "company_ids", runtime.ParamLocationQuery, *params.CompanyIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Salary != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "salary", runtime.ParamLocationQuery, *params.Salary); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JobType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "job_type", runtime.ParamLocationQuery, *params.JobType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Keywords != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keywords", runtime.ParamLocationQuery, *params.Keywords); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DatePosted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_posted", runtime.ParamLocationQuery, *params.DatePosted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPostCommentsRequest generates requests for GetPostComments
func NewGetPostCommentsRequest(server string, params *GetPostCommentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/post/comments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "urn", runtime.ParamLocationQuery, params.Urn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProfileRequest generates requests for GetProfile
func NewGetProfileRequest(server string, params *GetProfileParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "li_profile_url", runtime.ParamLocationQuery, params.LiProfileUrl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProfilePostsRequest generates requests for GetProfilePosts
func NewGetProfilePostsRequest(server string, params *GetProfilePostsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/profile/posts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "li_profile_url", runtime.ParamLocationQuery, params.LiProfileUrl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PaginationToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagination_token", runtime.ParamLocationQuery, *params.PaginationToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProfileRecommendationsGivenRequest generates requests for GetProfileRecommendationsGiven
func NewGetProfileRecommendationsGivenRequest(server string, params *GetProfileRecommendationsGivenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/profile/recommendations/given")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "li_profile_url", runtime.ParamLocationQuery, params.LiProfileUrl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProfileRecommendationsReceivedRequest generates requests for GetProfileRecommendationsReceived
func NewGetProfileRecommendationsReceivedRequest(server string, params *GetProfileRecommendationsReceivedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/profile/recommendations/received")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "li_profile_url", runtime.ParamLocationQuery, params.LiProfileUrl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProfileSearchRequest generates requests for GetProfileSearch
func NewGetProfileSearchRequest(server string, params *GetProfileSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/profile/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SchoolId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "school_id", runtime.ParamLocationQuery, *params.SchoolId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.KeywordSchool != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keyword_school", runtime.ParamLocationQuery, *params.KeywordSchool); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FirstName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first_name", runtime.ParamLocationQuery, *params.FirstName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_name", runtime.ParamLocationQuery, *params.LastName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CompanyName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "company_name", runtime.ParamLocationQuery, *params.CompanyName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Title != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title", runtime.ParamLocationQuery, *params.Title); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2CompanyRequest generates requests for GetV2Company
func NewGetV2CompanyRequest(server string, params *GetV2CompanyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/company")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "li_company_url", runtime.ParamLocationQuery, params.LiCompanyUrl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2CompanyInsightsRequest generates requests for GetV2CompanyInsights
func NewGetV2CompanyInsightsRequest(server string, params *GetV2CompanyInsightsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/company/insights")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "li_company_url", runtime.ParamLocationQuery, params.LiCompanyUrl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2CompanyPostsRequest generates requests for GetV2CompanyPosts
func NewGetV2CompanyPostsRequest(server string, params *GetV2CompanyPostsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/company/posts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "li_company_url", runtime.ParamLocationQuery, params.LiCompanyUrl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2JobsDetailsRequest generates requests for GetV2JobsDetails
func NewGetV2JobsDetailsRequest(server string, params *GetV2JobsDetailsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/jobs/details")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "job_id", runtime.ParamLocationQuery, params.JobId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2JobsHiringteamRequest generates requests for GetV2JobsHiringteam
func NewGetV2JobsHiringteamRequest(server string, params *GetV2JobsHiringteamParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/jobs/hiringteam")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.JobId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "job_id", runtime.ParamLocationQuery, *params.JobId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2JobsSearchRequest generates requests for GetV2JobsSearch
func NewGetV2JobsSearchRequest(server string, params *GetV2JobsSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/jobs/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CompanyIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "company_ids", runtime.ParamLocationQuery, *params.CompanyIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Salary != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "salary", runtime.ParamLocationQuery, *params.Salary); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.JobType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "job_type", runtime.ParamLocationQuery, *params.JobType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Keywords != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keywords", runtime.ParamLocationQuery, *params.Keywords); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Location != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "location", runtime.ParamLocationQuery, *params.Location); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DatePosted != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date_posted", runtime.ParamLocationQuery, *params.DatePosted); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2PostCommentsRequest generates requests for GetV2PostComments
func NewGetV2PostCommentsRequest(server string, params *GetV2PostCommentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/post/comments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "urn", runtime.ParamLocationQuery, params.Urn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2PostReactionsRequest generates requests for GetV2PostReactions
func NewGetV2PostReactionsRequest(server string, params *GetV2PostReactionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/post/reactions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "post_url", runtime.ParamLocationQuery, params.PostUrl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2ProfileRequest generates requests for GetV2Profile
func NewGetV2ProfileRequest(server string, params *GetV2ProfileParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "li_profile_url", runtime.ParamLocationQuery, params.LiProfileUrl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2ProfilePostsRequest generates requests for GetV2ProfilePosts
func NewGetV2ProfilePostsRequest(server string, params *GetV2ProfilePostsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/profile/posts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "li_profile_url", runtime.ParamLocationQuery, params.LiProfileUrl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PaginationToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagination_token", runtime.ParamLocationQuery, *params.PaginationToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2ProfileRecommendationsGivenRequest generates requests for GetV2ProfileRecommendationsGiven
func NewGetV2ProfileRecommendationsGivenRequest(server string, params *GetV2ProfileRecommendationsGivenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/profile/recommendations/given")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "li_profile_url", runtime.ParamLocationQuery, params.LiProfileUrl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2ProfileRecommendationsReceivedRequest generates requests for GetV2ProfileRecommendationsReceived
func NewGetV2ProfileRecommendationsReceivedRequest(server string, params *GetV2ProfileRecommendationsReceivedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/profile/recommendations/received")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "li_profile_url", runtime.ParamLocationQuery, params.LiProfileUrl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetV2ProfileSearchRequest generates requests for GetV2ProfileSearch
func NewGetV2ProfileSearchRequest(server string, params *GetV2ProfileSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/profile/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SchoolId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "school_id", runtime.ParamLocationQuery, *params.SchoolId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.KeywordSchool != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keyword_school", runtime.ParamLocationQuery, *params.KeywordSchool); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FirstName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first_name", runtime.ParamLocationQuery, *params.FirstName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_name", runtime.ParamLocationQuery, *params.LastName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CompanyName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "company_name", runtime.ParamLocationQuery, *params.CompanyName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Title != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "title", runtime.ParamLocationQuery, *params.Title); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCompanyWithResponse request
	GetCompanyWithResponse(ctx context.Context, params *GetCompanyParams, reqEditors ...RequestEditorFn) (*GetCompanyResponse, error)

	// GetJobsDetailsWithResponse request
	GetJobsDetailsWithResponse(ctx context.Context, params *GetJobsDetailsParams, reqEditors ...RequestEditorFn) (*GetJobsDetailsResponse, error)

	// GetJobsSearchWithResponse request
	GetJobsSearchWithResponse(ctx context.Context, params *GetJobsSearchParams, reqEditors ...RequestEditorFn) (*GetJobsSearchResponse, error)

	// GetPostCommentsWithResponse request
	GetPostCommentsWithResponse(ctx context.Context, params *GetPostCommentsParams, reqEditors ...RequestEditorFn) (*GetPostCommentsResponse, error)

	// GetProfileWithResponse request
	GetProfileWithResponse(ctx context.Context, params *GetProfileParams, reqEditors ...RequestEditorFn) (*GetProfileResponse, error)

	// GetProfilePostsWithResponse request
	GetProfilePostsWithResponse(ctx context.Context, params *GetProfilePostsParams, reqEditors ...RequestEditorFn) (*GetProfilePostsResponse, error)

	// GetProfileRecommendationsGivenWithResponse request
	GetProfileRecommendationsGivenWithResponse(ctx context.Context, params *GetProfileRecommendationsGivenParams, reqEditors ...RequestEditorFn) (*GetProfileRecommendationsGivenResponse, error)

	// GetProfileRecommendationsReceivedWithResponse request
	GetProfileRecommendationsReceivedWithResponse(ctx context.Context, params *GetProfileRecommendationsReceivedParams, reqEditors ...RequestEditorFn) (*GetProfileRecommendationsReceivedResponse, error)

	// GetProfileSearchWithResponse request
	GetProfileSearchWithResponse(ctx context.Context, params *GetProfileSearchParams, reqEditors ...RequestEditorFn) (*GetProfileSearchResponse, error)

	// GetV2CompanyWithResponse request
	GetV2CompanyWithResponse(ctx context.Context, params *GetV2CompanyParams, reqEditors ...RequestEditorFn) (*GetV2CompanyResponse, error)

	// GetV2CompanyInsightsWithResponse request
	GetV2CompanyInsightsWithResponse(ctx context.Context, params *GetV2CompanyInsightsParams, reqEditors ...RequestEditorFn) (*GetV2CompanyInsightsResponse, error)

	// GetV2CompanyPostsWithResponse request
	GetV2CompanyPostsWithResponse(ctx context.Context, params *GetV2CompanyPostsParams, reqEditors ...RequestEditorFn) (*GetV2CompanyPostsResponse, error)

	// GetV2JobsDetailsWithResponse request
	GetV2JobsDetailsWithResponse(ctx context.Context, params *GetV2JobsDetailsParams, reqEditors ...RequestEditorFn) (*GetV2JobsDetailsResponse, error)

	// GetV2JobsHiringteamWithResponse request
	GetV2JobsHiringteamWithResponse(ctx context.Context, params *GetV2JobsHiringteamParams, reqEditors ...RequestEditorFn) (*GetV2JobsHiringteamResponse, error)

	// GetV2JobsSearchWithResponse request
	GetV2JobsSearchWithResponse(ctx context.Context, params *GetV2JobsSearchParams, reqEditors ...RequestEditorFn) (*GetV2JobsSearchResponse, error)

	// GetV2PostCommentsWithResponse request
	GetV2PostCommentsWithResponse(ctx context.Context, params *GetV2PostCommentsParams, reqEditors ...RequestEditorFn) (*GetV2PostCommentsResponse, error)

	// GetV2PostReactionsWithResponse request
	GetV2PostReactionsWithResponse(ctx context.Context, params *GetV2PostReactionsParams, reqEditors ...RequestEditorFn) (*GetV2PostReactionsResponse, error)

	// GetV2ProfileWithResponse request
	GetV2ProfileWithResponse(ctx context.Context, params *GetV2ProfileParams, reqEditors ...RequestEditorFn) (*GetV2ProfileResponse, error)

	// GetV2ProfilePostsWithResponse request
	GetV2ProfilePostsWithResponse(ctx context.Context, params *GetV2ProfilePostsParams, reqEditors ...RequestEditorFn) (*GetV2ProfilePostsResponse, error)

	// GetV2ProfileRecommendationsGivenWithResponse request
	GetV2ProfileRecommendationsGivenWithResponse(ctx context.Context, params *GetV2ProfileRecommendationsGivenParams, reqEditors ...RequestEditorFn) (*GetV2ProfileRecommendationsGivenResponse, error)

	// GetV2ProfileRecommendationsReceivedWithResponse request
	GetV2ProfileRecommendationsReceivedWithResponse(ctx context.Context, params *GetV2ProfileRecommendationsReceivedParams, reqEditors ...RequestEditorFn) (*GetV2ProfileRecommendationsReceivedResponse, error)

	// GetV2ProfileSearchWithResponse request
	GetV2ProfileSearchWithResponse(ctx context.Context, params *GetV2ProfileSearchParams, reqEditors ...RequestEditorFn) (*GetV2ProfileSearchResponse, error)
}

type GetCompanyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetCompanyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobsDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetJobsDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobsDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobsSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetJobsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPostCommentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPostCommentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPostCommentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProfilePostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetProfilePostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProfilePostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProfileRecommendationsGivenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetProfileRecommendationsGivenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProfileRecommendationsGivenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProfileRecommendationsReceivedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetProfileRecommendationsReceivedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProfileRecommendationsReceivedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProfileSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetProfileSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProfileSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2CompanyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV2CompanyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2CompanyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2CompanyInsightsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV2CompanyInsightsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2CompanyInsightsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2CompanyPostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV2CompanyPostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2CompanyPostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2JobsDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV2JobsDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2JobsDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2JobsHiringteamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV2JobsHiringteamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2JobsHiringteamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2JobsSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV2JobsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2JobsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2PostCommentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV2PostCommentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2PostCommentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2PostReactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV2PostReactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2PostReactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2ProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV2ProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2ProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2ProfilePostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV2ProfilePostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2ProfilePostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2ProfileRecommendationsGivenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV2ProfileRecommendationsGivenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2ProfileRecommendationsGivenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2ProfileRecommendationsReceivedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV2ProfileRecommendationsReceivedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2ProfileRecommendationsReceivedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV2ProfileSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV2ProfileSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV2ProfileSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCompanyWithResponse request returning *GetCompanyResponse
func (c *ClientWithResponses) GetCompanyWithResponse(ctx context.Context, params *GetCompanyParams, reqEditors ...RequestEditorFn) (*GetCompanyResponse, error) {
	rsp, err := c.GetCompany(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyResponse(rsp)
}

// GetJobsDetailsWithResponse request returning *GetJobsDetailsResponse
func (c *ClientWithResponses) GetJobsDetailsWithResponse(ctx context.Context, params *GetJobsDetailsParams, reqEditors ...RequestEditorFn) (*GetJobsDetailsResponse, error) {
	rsp, err := c.GetJobsDetails(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobsDetailsResponse(rsp)
}

// GetJobsSearchWithResponse request returning *GetJobsSearchResponse
func (c *ClientWithResponses) GetJobsSearchWithResponse(ctx context.Context, params *GetJobsSearchParams, reqEditors ...RequestEditorFn) (*GetJobsSearchResponse, error) {
	rsp, err := c.GetJobsSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobsSearchResponse(rsp)
}

// GetPostCommentsWithResponse request returning *GetPostCommentsResponse
func (c *ClientWithResponses) GetPostCommentsWithResponse(ctx context.Context, params *GetPostCommentsParams, reqEditors ...RequestEditorFn) (*GetPostCommentsResponse, error) {
	rsp, err := c.GetPostComments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPostCommentsResponse(rsp)
}

// GetProfileWithResponse request returning *GetProfileResponse
func (c *ClientWithResponses) GetProfileWithResponse(ctx context.Context, params *GetProfileParams, reqEditors ...RequestEditorFn) (*GetProfileResponse, error) {
	rsp, err := c.GetProfile(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProfileResponse(rsp)
}

// GetProfilePostsWithResponse request returning *GetProfilePostsResponse
func (c *ClientWithResponses) GetProfilePostsWithResponse(ctx context.Context, params *GetProfilePostsParams, reqEditors ...RequestEditorFn) (*GetProfilePostsResponse, error) {
	rsp, err := c.GetProfilePosts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProfilePostsResponse(rsp)
}

// GetProfileRecommendationsGivenWithResponse request returning *GetProfileRecommendationsGivenResponse
func (c *ClientWithResponses) GetProfileRecommendationsGivenWithResponse(ctx context.Context, params *GetProfileRecommendationsGivenParams, reqEditors ...RequestEditorFn) (*GetProfileRecommendationsGivenResponse, error) {
	rsp, err := c.GetProfileRecommendationsGiven(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProfileRecommendationsGivenResponse(rsp)
}

// GetProfileRecommendationsReceivedWithResponse request returning *GetProfileRecommendationsReceivedResponse
func (c *ClientWithResponses) GetProfileRecommendationsReceivedWithResponse(ctx context.Context, params *GetProfileRecommendationsReceivedParams, reqEditors ...RequestEditorFn) (*GetProfileRecommendationsReceivedResponse, error) {
	rsp, err := c.GetProfileRecommendationsReceived(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProfileRecommendationsReceivedResponse(rsp)
}

// GetProfileSearchWithResponse request returning *GetProfileSearchResponse
func (c *ClientWithResponses) GetProfileSearchWithResponse(ctx context.Context, params *GetProfileSearchParams, reqEditors ...RequestEditorFn) (*GetProfileSearchResponse, error) {
	rsp, err := c.GetProfileSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProfileSearchResponse(rsp)
}

// GetV2CompanyWithResponse request returning *GetV2CompanyResponse
func (c *ClientWithResponses) GetV2CompanyWithResponse(ctx context.Context, params *GetV2CompanyParams, reqEditors ...RequestEditorFn) (*GetV2CompanyResponse, error) {
	rsp, err := c.GetV2Company(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2CompanyResponse(rsp)
}

// GetV2CompanyInsightsWithResponse request returning *GetV2CompanyInsightsResponse
func (c *ClientWithResponses) GetV2CompanyInsightsWithResponse(ctx context.Context, params *GetV2CompanyInsightsParams, reqEditors ...RequestEditorFn) (*GetV2CompanyInsightsResponse, error) {
	rsp, err := c.GetV2CompanyInsights(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2CompanyInsightsResponse(rsp)
}

// GetV2CompanyPostsWithResponse request returning *GetV2CompanyPostsResponse
func (c *ClientWithResponses) GetV2CompanyPostsWithResponse(ctx context.Context, params *GetV2CompanyPostsParams, reqEditors ...RequestEditorFn) (*GetV2CompanyPostsResponse, error) {
	rsp, err := c.GetV2CompanyPosts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2CompanyPostsResponse(rsp)
}

// GetV2JobsDetailsWithResponse request returning *GetV2JobsDetailsResponse
func (c *ClientWithResponses) GetV2JobsDetailsWithResponse(ctx context.Context, params *GetV2JobsDetailsParams, reqEditors ...RequestEditorFn) (*GetV2JobsDetailsResponse, error) {
	rsp, err := c.GetV2JobsDetails(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2JobsDetailsResponse(rsp)
}

// GetV2JobsHiringteamWithResponse request returning *GetV2JobsHiringteamResponse
func (c *ClientWithResponses) GetV2JobsHiringteamWithResponse(ctx context.Context, params *GetV2JobsHiringteamParams, reqEditors ...RequestEditorFn) (*GetV2JobsHiringteamResponse, error) {
	rsp, err := c.GetV2JobsHiringteam(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2JobsHiringteamResponse(rsp)
}

// GetV2JobsSearchWithResponse request returning *GetV2JobsSearchResponse
func (c *ClientWithResponses) GetV2JobsSearchWithResponse(ctx context.Context, params *GetV2JobsSearchParams, reqEditors ...RequestEditorFn) (*GetV2JobsSearchResponse, error) {
	rsp, err := c.GetV2JobsSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2JobsSearchResponse(rsp)
}

// GetV2PostCommentsWithResponse request returning *GetV2PostCommentsResponse
func (c *ClientWithResponses) GetV2PostCommentsWithResponse(ctx context.Context, params *GetV2PostCommentsParams, reqEditors ...RequestEditorFn) (*GetV2PostCommentsResponse, error) {
	rsp, err := c.GetV2PostComments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2PostCommentsResponse(rsp)
}

// GetV2PostReactionsWithResponse request returning *GetV2PostReactionsResponse
func (c *ClientWithResponses) GetV2PostReactionsWithResponse(ctx context.Context, params *GetV2PostReactionsParams, reqEditors ...RequestEditorFn) (*GetV2PostReactionsResponse, error) {
	rsp, err := c.GetV2PostReactions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2PostReactionsResponse(rsp)
}

// GetV2ProfileWithResponse request returning *GetV2ProfileResponse
func (c *ClientWithResponses) GetV2ProfileWithResponse(ctx context.Context, params *GetV2ProfileParams, reqEditors ...RequestEditorFn) (*GetV2ProfileResponse, error) {
	rsp, err := c.GetV2Profile(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2ProfileResponse(rsp)
}

// GetV2ProfilePostsWithResponse request returning *GetV2ProfilePostsResponse
func (c *ClientWithResponses) GetV2ProfilePostsWithResponse(ctx context.Context, params *GetV2ProfilePostsParams, reqEditors ...RequestEditorFn) (*GetV2ProfilePostsResponse, error) {
	rsp, err := c.GetV2ProfilePosts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2ProfilePostsResponse(rsp)
}

// GetV2ProfileRecommendationsGivenWithResponse request returning *GetV2ProfileRecommendationsGivenResponse
func (c *ClientWithResponses) GetV2ProfileRecommendationsGivenWithResponse(ctx context.Context, params *GetV2ProfileRecommendationsGivenParams, reqEditors ...RequestEditorFn) (*GetV2ProfileRecommendationsGivenResponse, error) {
	rsp, err := c.GetV2ProfileRecommendationsGiven(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2ProfileRecommendationsGivenResponse(rsp)
}

// GetV2ProfileRecommendationsReceivedWithResponse request returning *GetV2ProfileRecommendationsReceivedResponse
func (c *ClientWithResponses) GetV2ProfileRecommendationsReceivedWithResponse(ctx context.Context, params *GetV2ProfileRecommendationsReceivedParams, reqEditors ...RequestEditorFn) (*GetV2ProfileRecommendationsReceivedResponse, error) {
	rsp, err := c.GetV2ProfileRecommendationsReceived(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2ProfileRecommendationsReceivedResponse(rsp)
}

// GetV2ProfileSearchWithResponse request returning *GetV2ProfileSearchResponse
func (c *ClientWithResponses) GetV2ProfileSearchWithResponse(ctx context.Context, params *GetV2ProfileSearchParams, reqEditors ...RequestEditorFn) (*GetV2ProfileSearchResponse, error) {
	rsp, err := c.GetV2ProfileSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV2ProfileSearchResponse(rsp)
}

// ParseGetCompanyResponse parses an HTTP response from a GetCompanyWithResponse call
func ParseGetCompanyResponse(rsp *http.Response) (*GetCompanyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetJobsDetailsResponse parses an HTTP response from a GetJobsDetailsWithResponse call
func ParseGetJobsDetailsResponse(rsp *http.Response) (*GetJobsDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobsDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetJobsSearchResponse parses an HTTP response from a GetJobsSearchWithResponse call
func ParseGetJobsSearchResponse(rsp *http.Response) (*GetJobsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPostCommentsResponse parses an HTTP response from a GetPostCommentsWithResponse call
func ParseGetPostCommentsResponse(rsp *http.Response) (*GetPostCommentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPostCommentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProfileResponse parses an HTTP response from a GetProfileWithResponse call
func ParseGetProfileResponse(rsp *http.Response) (*GetProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProfilePostsResponse parses an HTTP response from a GetProfilePostsWithResponse call
func ParseGetProfilePostsResponse(rsp *http.Response) (*GetProfilePostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProfilePostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProfileRecommendationsGivenResponse parses an HTTP response from a GetProfileRecommendationsGivenWithResponse call
func ParseGetProfileRecommendationsGivenResponse(rsp *http.Response) (*GetProfileRecommendationsGivenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProfileRecommendationsGivenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProfileRecommendationsReceivedResponse parses an HTTP response from a GetProfileRecommendationsReceivedWithResponse call
func ParseGetProfileRecommendationsReceivedResponse(rsp *http.Response) (*GetProfileRecommendationsReceivedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProfileRecommendationsReceivedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetProfileSearchResponse parses an HTTP response from a GetProfileSearchWithResponse call
func ParseGetProfileSearchResponse(rsp *http.Response) (*GetProfileSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProfileSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2CompanyResponse parses an HTTP response from a GetV2CompanyWithResponse call
func ParseGetV2CompanyResponse(rsp *http.Response) (*GetV2CompanyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2CompanyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2CompanyInsightsResponse parses an HTTP response from a GetV2CompanyInsightsWithResponse call
func ParseGetV2CompanyInsightsResponse(rsp *http.Response) (*GetV2CompanyInsightsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2CompanyInsightsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2CompanyPostsResponse parses an HTTP response from a GetV2CompanyPostsWithResponse call
func ParseGetV2CompanyPostsResponse(rsp *http.Response) (*GetV2CompanyPostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2CompanyPostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2JobsDetailsResponse parses an HTTP response from a GetV2JobsDetailsWithResponse call
func ParseGetV2JobsDetailsResponse(rsp *http.Response) (*GetV2JobsDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2JobsDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2JobsHiringteamResponse parses an HTTP response from a GetV2JobsHiringteamWithResponse call
func ParseGetV2JobsHiringteamResponse(rsp *http.Response) (*GetV2JobsHiringteamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2JobsHiringteamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2JobsSearchResponse parses an HTTP response from a GetV2JobsSearchWithResponse call
func ParseGetV2JobsSearchResponse(rsp *http.Response) (*GetV2JobsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2JobsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2PostCommentsResponse parses an HTTP response from a GetV2PostCommentsWithResponse call
func ParseGetV2PostCommentsResponse(rsp *http.Response) (*GetV2PostCommentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2PostCommentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2PostReactionsResponse parses an HTTP response from a GetV2PostReactionsWithResponse call
func ParseGetV2PostReactionsResponse(rsp *http.Response) (*GetV2PostReactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2PostReactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2ProfileResponse parses an HTTP response from a GetV2ProfileWithResponse call
func ParseGetV2ProfileResponse(rsp *http.Response) (*GetV2ProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2ProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2ProfilePostsResponse parses an HTTP response from a GetV2ProfilePostsWithResponse call
func ParseGetV2ProfilePostsResponse(rsp *http.Response) (*GetV2ProfilePostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2ProfilePostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2ProfileRecommendationsGivenResponse parses an HTTP response from a GetV2ProfileRecommendationsGivenWithResponse call
func ParseGetV2ProfileRecommendationsGivenResponse(rsp *http.Response) (*GetV2ProfileRecommendationsGivenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2ProfileRecommendationsGivenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2ProfileRecommendationsReceivedResponse parses an HTTP response from a GetV2ProfileRecommendationsReceivedWithResponse call
func ParseGetV2ProfileRecommendationsReceivedResponse(rsp *http.Response) (*GetV2ProfileRecommendationsReceivedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2ProfileRecommendationsReceivedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV2ProfileSearchResponse parses an HTTP response from a GetV2ProfileSearchWithResponse call
func ParseGetV2ProfileSearchResponse(rsp *http.Response) (*GetV2ProfileSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV2ProfileSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
